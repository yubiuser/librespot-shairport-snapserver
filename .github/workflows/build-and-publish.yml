# .github/workflows/build-and-publish.yml
name: Build and Publish Docker Images

on:
  workflow_dispatch:            # manual trigger
  release:
    types: [published]          # on new release publish
  pull_request:
    types: [opened, synchronize, reopened]  # build/test PR branches only
  push:
    branches:
      - development             # push to development branch
    tags:
      - 'v*.*.*'                 # push of version tags (e.g., v1.2.3)

env:
  # Base image name in the registry (ghcr.io/owner/repo)
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  # Determine if images/manifests should actually be pushed to the registry
  SHOULD_PUSH: ${{ github.event_name != 'pull_request' }}

# Define permissions required for the workflow at the top level
permissions:
  contents: read      # To checkout the code
  packages: write     # To push docker images and manifests to GHCR

jobs:
  build:
    # Dynamic job name includes variant and platform
    name: Build ${{ matrix.variant }} on ${{ matrix.platform }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        include:
          # --- Full Alpine Variants ---
          - platform: linux/amd64
            dockerfile: alpine.dockerfile
            variant: full
            image_suffix: "" # No suffix for the arch-specific full image tag
          - platform: linux/arm64
            dockerfile: alpine.dockerfile
            variant: full
            image_suffix: ""
          # --- Slim Alpine Variants ---
          - platform: linux/amd64
            dockerfile: alpine.dockerfile
            variant: slim
            image_suffix: -slim
          - platform: linux/arm64
            dockerfile: alpine.dockerfile
            variant: slim
            image_suffix: -slim

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for Git-based tags in metadata-action

      - name: Prepare IDs and names
        id: prep
        run: |
          p=$(echo "${{ matrix.platform }}" | tr '/.' '-')
          f=$(basename "${{ matrix.dockerfile }}" .dockerfile)
          # Artifact name includes variant for uniqueness
          pair="${p}-${f}-${{ matrix.variant }}"
          echo "PAIR=${pair}" >> $GITHUB_ENV
          # Arch-specific image name uses the matrix suffix
          img="${{ env.REGISTRY_IMAGE }}${{ matrix.image_suffix }}"
          echo "IMAGE=${img}" >> $GITHUB_ENV
          echo "pair=${pair}" >> $GITHUB_OUTPUT
          echo "image=${img}" >> $GITHUB_OUTPUT
          # Pass variant for artifact content
          echo "variant=${{ matrix.variant }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Metadata action now tags the ARCH-SPECIFIC image (e.g., repo or repo-slim)
      # The manifest job will create the final multi-arch tags.
      - name: Extract metadata for arch-specific image (${{ steps.prep.outputs.image }})
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.prep.outputs.image }}
          tags: |
            # Generate a unique, always valid tag for each build matrix job,
            # incorporating the short commit SHA, variant, and platform.
            # This tag is temporary and used only within the build job.
            type=raw,value=build-{{sha}}-${{ matrix.variant }}-${{ matrix.platform }}
        env:
          # Use short SHA (e.g., 7 characters) for tags
          DOCKER_METADATA_SHORT_SHA_LENGTH: 7

      - name: Log in to GitHub Container Registry (ghcr.io)
        if: env.SHOULD_PUSH == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.variant }} for ${{ matrix.platform }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          # Specify the build target (full or slim)
          target: ${{ matrix.variant }}
          # Scope cache per specific build job instance (variant AND platform)
          cache-from: type=gha,scope=${{ steps.prep.outputs.pair }}
          cache-to: type=gha,scope=${{ steps.prep.outputs.pair }},mode=max
          # Use labels generated by meta step if needed for the arch-specific image
          # labels: ${{ steps.meta.outputs.labels }} # Often labels are better applied to the final manifest
          # Use the temporary tags generated by the meta step
          tags: ${{ steps.meta.outputs.tags }}
          # Push the arch-specific image
          push: ${{ env.SHOULD_PUSH == 'true' }}
          # Output the image name and digest
          outputs: type=image,name=${{ steps.prep.outputs.image }}

      # --- Steps for Manifest Job Preparation (only if pushing) ---
      - name: Prepare image info artifact content (including variant)
        if: env.SHOULD_PUSH == 'true'
        run: |
          mkdir -p artifacts
          # Content now includes variant: "variant image@digest"
          echo "${{ steps.prep.outputs.variant }} ${{ steps.prep.outputs.image }}@${{ steps.build.outputs.digest }}" > artifacts/${{ env.PAIR }}.txt
          echo "Prepared artifact content for ${{ env.PAIR }}: $(cat artifacts/${{ env.PAIR }}.txt)"
        shell: bash

      - name: Upload image info artifact for manifest job
        if: env.SHOULD_PUSH == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: image-info-${{ env.PAIR }} # Artifact name is unique
          path: artifacts/${{ env.PAIR }}.txt
          if-no-files-found: error
          retention-days: 1

  manifest:
    name: Build and Push Multi-Arch Manifests
    needs: build
    runs-on: ubuntu-latest
    if: |
      needs.build.result == 'success'
      && github.event_name != 'pull_request'
      && github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Download all image info artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: image-info-* # Download all artifacts
          path: digest-files
          merge-multiple: true # Combine into one directory

      - name: Aggregate digests by variant
        id: agg
        run: |
          refs_full=""
          refs_slim=""
          echo "Looking for digest files in digest-files/ ..."
          ls -l digest-files/
          for f in digest-files/*.txt; do
            if [ -f "$f" ]; then
              # Read content: "variant image@digest"
              read -r variant image_digest <<< "$(<"$f")"
              echo "Read from $f: Variant=$variant, ImageDigest=$image_digest"
              if [ "$variant" == "full" ]; then
                refs_full="$refs_full $image_digest"
              elif [ "$variant" == "slim" ]; then
                refs_slim="$refs_slim $image_digest"
              else
                 echo "::warning::Unknown variant '$variant' found in artifact $f"
              fi
            else
              echo "Warning: Expected file $f not found or not a regular file."
            fi
          done
          # Trim leading/trailing whitespace
          refs_full=$(echo "$refs_full" | xargs)
          refs_slim=$(echo "$refs_slim" | xargs)

          # Check if digests were found
          if [ -z "$refs_full" ] && [ -z "$refs_slim" ]; then
            echo "::error::No image references found for any variant in downloaded artifacts."
            exit 1
          fi
          # Output both sets of references
          echo "refs_full=${refs_full}" >> $GITHUB_OUTPUT
          echo "refs_slim=${refs_slim}" >> $GITHUB_OUTPUT
          echo "Aggregated Full References: $refs_full"
          echo "Aggregated Slim References: $refs_slim"
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Metadata for FULL manifest ---
      - name: Extract manifest tags (Full version)
        id: meta-manifest-full
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }} # Base image name for default/full tags
          tags: |
            # === Event-specific tags ===
            # Push to branch: tag manifest with branch name (requires event=branch)
            type=ref,event=branch,pattern={{branch}},enable=${{ github.event_name == 'push' && github.ref_type == 'branch' }}
            # Push of a tag OR Release event: tag manifest with Git tag/release tag (requires event=tag)
            # Note: A release event implicitly involves a tag.
            type=ref,event=tag,pattern={{tag}},enable=${{ (github.event_name == 'push' && github.ref_type == 'tag') || github.event_name == 'release' }}
            # Release event: tag manifest with semver
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}},enable=${{ github.event_name == 'release' }}
            # Tag master branch push OR any tag/release as 'latest'
            type=raw,value=latest,enable=${{ github.ref_name == 'master' || github.ref_type == 'tag' || github.event_name == 'release' }}
            # Tag workflow_dispatch runs with SHA
            type=sha,enable=${{ github.event_name == 'workflow_dispatch' }}

      # --- Metadata for SLIM manifest ---
      - name: Extract manifest tags (Slim version)
        id: meta-manifest-slim
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }} # Base image name
          # Add '-slim' suffix to all generated tags
          flavor: |
            suffix=-slim
          # Define the tags explicitly again (DUPLICATED from above)
          tags: |
            # === Event-specific tags ===
            # Push to branch: tag manifest with branch name (requires event=branch)
            type=ref,event=branch,pattern={{branch}}{{flavor}},enable=${{ github.event_name == 'push' && github.ref_type == 'branch' }}
            # Push of a tag OR Release event: tag manifest with Git tag/release tag (requires event=tag)
            # Note: A release event implicitly involves a tag.
            type=ref,event=tag,pattern={{tag}}{{flavor}},enable=${{ (github.event_name == 'push' && github.ref_type == 'tag') || github.event_name == 'release' }}
            # Release event: tag manifest with semver
            type=semver,pattern={{version}}{{flavor}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}}{{flavor}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}{{flavor}},enable=${{ github.event_name == 'release' }}
            # Tag master branch push OR any tag/release as 'latest-slim'
            type=raw,value=latest{{flavor}},enable=${{ github.ref_name == 'master' || github.ref_type == 'tag' || github.event_name == 'release' }}
            # Tag workflow_dispatch runs with SHA-slim
            type=sha,suffix={{flavor}},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Log in to GitHub Container Registry (ghcr.io)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Create and push FULL manifest ---
      - name: Create and push FULL manifest list
        if: steps.agg.outputs.refs_full != '' # Only run if digests for 'full' exist
        run: |
          DESCRIPTION_FULL="Multi-arch Docker image containing snapserver, librespot, shairport-sync and Python tools, based on Alpine Linux."
          REFS="${{ steps.agg.outputs.refs_full }}"
          TAG_OPTS=$(echo '${{ steps.meta-manifest-full.outputs.json }}' | jq -r '.tags | map("-t "+.) | join(" ")')

          if [ -z "$TAG_OPTS" ] || [ "$TAG_OPTS" == "null" ]; then
              echo "Warning: No FULL manifest tags generated by metadata action for this event. Skipping FULL manifest push."
              exit 0
          fi

          echo "Creating FULL manifest list for ${{ env.REGISTRY_IMAGE }} with tags: ${TAG_OPTS}"
          echo "Using FULL image references: ${REFS}"
          echo "Adding FULL description annotation: ${DESCRIPTION_FULL}"

          docker buildx imagetools create \
            --annotation "index:org.opencontainers.image.description=${DESCRIPTION_FULL}" \
            ${TAG_OPTS} \
            ${REFS}
        shell: bash

      # --- Create and push SLIM manifest ---
      - name: Create and push SLIM manifest list
        if: steps.agg.outputs.refs_slim != '' # Only run if digests for 'slim' exist
        run: |
          DESCRIPTION_SLIM="Slim multi-arch Docker image containing snapserver, librespot and shairport-sync (NO Python tools), based on Alpine Linux."
          REFS="${{ steps.agg.outputs.refs_slim }}"
          TAG_OPTS=$(echo '${{ steps.meta-manifest-slim.outputs.json }}' | jq -r '.tags | map("-t "+.) | join(" ")')

          if [ -z "$TAG_OPTS" ] || [ "$TAG_OPTS" == "null" ]; then
              echo "Warning: No SLIM manifest tags generated by metadata action for this event. Skipping SLIM manifest push."
              exit 0
          fi

          echo "Creating SLIM manifest list for ${{ env.REGISTRY_IMAGE }} with tags: ${TAG_OPTS}"
          echo "Using SLIM image references: ${REFS}"
          echo "Adding SLIM description annotation: ${DESCRIPTION_SLIM}"

          docker buildx imagetools create \
            --annotation "index:org.opencontainers.image.description=${DESCRIPTION_SLIM}" \
            ${TAG_OPTS} \
            ${REFS}
        shell: bash

      # --- Inspect (Optional) - Inspect both latest and latest-slim if applicable ---
      - name: Inspect manifests (optional verification)
        if: always() # Always run this step if manifest job runs
        run: |
          # Inspect FULL primary tag
          PRIMARY_TAG_FULL=$(echo '${{ steps.meta-manifest-full.outputs.json }}' | jq -r '.tags[0]')
          if [ -n "$PRIMARY_TAG_FULL" ] && [ "$PRIMARY_TAG_FULL" != "null" ]; then
            echo "Inspecting FULL manifest tag: ${PRIMARY_TAG_FULL}"
            docker buildx imagetools inspect "${PRIMARY_TAG_FULL}" || echo "Inspection failed for tag ${PRIMARY_TAG_FULL}."
          else
             echo "No primary FULL tag was generated for inspection for this event."
          fi

          # Inspect SLIM primary tag
          PRIMARY_TAG_SLIM=$(echo '${{ steps.meta-manifest-slim.outputs.json }}' | jq -r '.tags[0]')
          if [ -n "$PRIMARY_TAG_SLIM" ] && [ "$PRIMARY_TAG_SLIM" != "null" ]; then
            echo "Inspecting SLIM manifest tag: ${PRIMARY_TAG_SLIM}"
            docker buildx imagetools inspect "${PRIMARY_TAG_SLIM}" || echo "Inspection failed for tag ${PRIMARY_TAG_SLIM}."
          else
             echo "No primary SLIM tag was generated for inspection for this event."
          fi
        shell: bash